{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime\"\u003eRuntime\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core\"\u003eCore\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental\"\u003eExperimental\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers\"\u003eContainers\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core\"\u003eCore\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Source/Runtime/Core/Public/Experimental/Containers/GrowOnlyLockFreeHash.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"Experimental/Containers/GrowOnlyLockFreeHash.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eSyntax\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003etemplate\u0026lt;typename EntryType, typename KeyType, typename ValueType\u0026gt;  \nclass TGrowOnlyLockFreeHash  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003eHash table with fast lock free reads, that only supports insertion of items, and no modification of values. KeyType must be an integer. EntryType should be a POD with an identifiable \"empty\" state that can't occur in the table, and include the following member functions: KeyType GetKey() const;                                         // Get the key from EntryType\nValueType GetValue() const;                                     // Get the value from EntryType\nbool IsEmpty() const;                                           // Query whether EntryType is empty\nvoid SetKeyValue(KeyType Key, ValueType Value);                 // Write key and value into EntryType (ATOMICALLY!  See below)\nstatic uint32 KeyHash(KeyType Key);                             // Convert Key to more well distributed hash\nstatic void ClearEntries(EntryType* Entries, int32 EntryCount); // Fill an array of entries with empty values\u003c/p\u003e\n\n\u003cp\u003eThe function \"SetKeyValue\" must be multi-thread safe when writing new items! This means writing the Key last and atomically, or writing the entire EntryType in a single write (say if the key and value are packed into a single integer word). Inline is recommended, since these functions are called a lot in the inner loop of the algorithm. A simple implementation of \"KeyHash\" can just return the Key (if it's already reasonable as a hash), or mix the bits if better distribution is required. A simple implementation of \"ClearEntries\" can just be a memset, if zero represents an empty entry.\u003c/p\u003e\n\n\u003cp\u003eA set can be approximated by making \"GetValue\" a nop function, and just paying attention to the bool result from FindEntry, although you do need to either reserve a certain Key as invalid, or add space to store a valid flag as the Value. This class should only be used for small value types, as the values are embedded into the hash table, and not stored separately.\u003c/p\u003e\n\n\u003cp\u003eWrites are implemented using a lock  it would be possible to make writes lock free (or lock free when resizing doesn't occur), but it adds complexity. If we were to go that route, it would make sense to create a fully generic lock free set, which would be much more involved to implement and validate than this simple class, and might also offer somewhat worse read perf. Lock free containers that support item removal either need additional synchronization overhead on readers, so writers can tell if a reader is active and spin, or need graveyard markers and a garbage collection pass called periodically, which makes it no longer a simple standalone container.\u003c/p\u003e\n\n\u003cp\u003eLock free reads are accomplished by the reader atomically pulling the hash table pointer from the class. The hash table is self contained, with its size stored in the table itself, and hash tables are not freed until the class's destruction. So if the table needs to be reallocated due to a write, active readers will still have valid memory. This does mean that tables leak, but worst case, you end up with half of the memory being waste. It would be possible to garbage collect the excess tables, but you'd need some kind of global synchronization to make sure no readers are active.\u003c/p\u003e\n\n\u003cp\u003eBesides cleanup of wasted tables, it might be useful to provide a function to clear a table. This would involve clearing the Key for all the elements in the table (but leaving the memory allocated), and can be done safely with active readers. It's not possible to safely remove individual items due to the need to potentially move other items, which would break an active reader that has already searched past a moved item. But in the case of removing all items, we don't care when a reader fails, it's expected that eventually all readers will fail, regardless of where they are searching. A clear function could be useful if a lot of the data you are caching is no longer used, and you want to reset the cache.\u003c/p\u003e\n\n\u003ch2\u003eConstructors\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/78c0369a-f2e4-46d7-ae0f-336bf966c307/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/__ctor\"\u003eTGrowOnlyLockFreeHash\u003c/a\u003e\n (\n\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/HAL/FMalloc\"\u003eFMalloc\u003c/a\u003e* InMalloc\u003cbr\u003e\n )\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eDestructors\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/55995594-45ae-4dac-9e2f-d3ae6a6559df/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/__dtor\"\u003e~TGrowOnlyLockFreeHash\u003c/a\u003e ()\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eFunctions\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/731d358d-f8d0-4842-8448-9671d100be01/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003evoid\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/Emplace\"\u003eEmplace\u003c/a\u003e\n (\nKeyType Key,\u003cbr\u003e\nValueType Value,\u003cbr\u003e\nbool* bIsAlreadyInTable\u003cbr\u003e\n )\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003eAdd an entry with the given Key to the hash table, will do nothing if the item already exists\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/0259c074-5ed3-449e-9694-ea2b8614762d/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e \u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/0b07c4a6-6eb1-467d-b425-36655e92a3f7/api_function_const.png\" alt=\"Const\" loading=\"lazy\" title=\"Const\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003evoid\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/Find\"\u003eFind\u003c/a\u003e\n (\nKeyType Key,\u003cbr\u003e\nValueType* OutValue,\u003cbr\u003e\nbool* bIsAlreadyInTable\u003cbr\u003e\n )\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003eFind an entry in the hash table\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/f43a8943-5ba9-4600-8eed-eb6ea7379262/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003evoid\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/FindOrAdd\"\u003eFindOrAdd\u003c/a\u003e\n (\nKeyType Key,\u003cbr\u003e\nValueType Value,\u003cbr\u003e\nbool* bIsAlreadyInTable\u003cbr\u003e\n )\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/111a4a0f-a389-4bb4-b95b-57ca6aa7eee2/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003evoid\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/Reserve\"\u003eReserve\u003c/a\u003e\n (\n\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/int32\"\u003eint32\u003c/a\u003e Count\u003cbr\u003e\n )\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003ePreallocate the hash table to a certain size\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eConstants\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash/DEFAULT_INITIAL_-\"\u003eDEFAULT_INITIAL_SIZE\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "Hash table with fast lock free reads, that only supports insertion of items, and no modification of values.",
  "document_type": null,
  "hash_id": "qp34e",
  "id": 3537043,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "WYrJ6",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Runtime/Core/Experimental/Containers/TGrowOnlyLockFreeHash",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "TGrowOnlyLockFreeHash",
  "updated_at": "2024-11-13T16:41:15.734+00:00",
  "views_count": 0
}