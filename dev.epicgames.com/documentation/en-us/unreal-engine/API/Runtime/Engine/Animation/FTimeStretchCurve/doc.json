{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime\"\u003eRuntime\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine\"\u003eEngine\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Animation\"\u003eAnimation\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine\"\u003eEngine\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Source/Runtime/Engine/Classes/Animation/TimeStretchCurve.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"Animation/TimeStretchCurve.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eSyntax\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003eUSTRUCT \u0026#40;\u0026#41;  \nstruct FTimeStretchCurve  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003e= Time Stretch Curve =\u003c/p\u003e\n\n\u003cp\u003e= What is it? The Time Stretch Curve is an optional float curve that montages can\nuse to define where a montage is allowed to speed up or slow down.\nLet's say we have a montage of default play time T_Original.\nWe now want that montage to play for a different T_Target play time\nTypically we would uniformly play rate the animation to reach that goal.\u003c/p\u003e\n\n\u003cp\u003eThe Time Stretch Curve allows doing the same thing but non uniformly,\nby defining which regions can be play rated more or less.\u003c/p\u003e\n\n\u003cp\u003eThe Curve values are normalized.\nSo a Curve value of 0 means \"don't play rate this\".\nAnd a Curve value of 1 means \"play rate this the most\".\nIntermediate values will be weighted accordingly.\u003c/p\u003e\n\n\u003cp\u003eImagine the following scenario, you have a character attacking with a staff.\nThe animation is authored with holds after striking.\nLet's say the character levels up over the course of the game, and\ntheir attacks are getting faster and faster (play time is shorter).\u003c/p\u003e\n\n\u003cp\u003eBy using a Time Stretch Curve, most of the time compression could happen\nduring the holds. So the strikes look mostly unaffected.\nThis allows using a single animation, and scaling it for very different\ndesired play times.\u003c/p\u003e\n\n\u003cp\u003e= How does it work? Given a Montage of length T_Original, and a float curve C.\nCurve C is sampled over N segments of fixed time 'SamplingTimeStep'.\nEach element, C_i is normalized. 0 \u003c= C_i \u003c= 1\nand 0 \u003c= i \u003c= N.\u003c/p\u003e\n\n\u003cp\u003eWe have Sum(SamplingTimeStep) = T_Original = N * SamplingTimeStep\nSamplingTimeStep = T_Original / N\u003c/p\u003e\n\n\u003cp\u003eGiven a different length T_Target,\nC remaps positions from T_Target to T_Original according to the following function:\ndTO = dT_i * U * (1 + S * C_i)\nwhere:\nSum(dTO) = T_Original\nSum(dT_i) = T_Target\nU = UniformPlayRate\nS = Curve Scale Factor\nC_i = sampled curve value, constant over the interval dTO\u003c/p\u003e\n\n\u003cp\u003edTO is fixed, based on the chosen 'SamplingTimeStep',\nbut in practice we can combine consecutive segments that have the same C_i value.\u003c/p\u003e\n\n\u003cp\u003eWe would like U to be 1 (or -1) as much as possible.\nMeaning the Curve should do all the remapping whenever possible.\nU(niformPlayRate) should only come into play when C can't remap T_Target to T_Original on its own.\nThis can happen when trying to speed up the animation,\nbut the Curve is not enough to reach that time compression.\nIn that event, uniform scaling kicks in.\u003c/p\u003e\n\n\u003cp\u003eWe call PR_i (or OverallPlayRate for Segment i)\nPR_i = U * (1 + S * C_i)\ndTO = dT_i * PR_i\u003c/p\u003e\n\n\u003cp\u003eWe also want PR_i \u003e 0, that is it should never backtrack or pause during playback of animation.\nA Montage can still play in reverse with U \u003c 0.\u003c/p\u003e\n\n\u003cp\u003e= How is T_Target defined? When we play a Montage with a PlayRate of PR, we assume this means:\nT_Target = T_Original * PR\nSo this system does not change the interface for playing a montage.\u003c/p\u003e\n\n\u003cp\u003eIf a curve is not defined, the mapping is defined as:\ndTO_i = dT_i * U\u003c/p\u003e\n\n\u003cp\u003eIf a a curve is defined:\ndTO_i = dT_i * U * (1 + S * C_i)\u003c/p\u003e\n\n\u003cp\u003eWe can see that no curve means S == 0.\nAlso if we're not scaling the montage, T_Target == T_Original, we also have S == 0.\u003c/p\u003e\n\n\u003cp\u003eSo, this makes the curve completely optional. And it seamlessly integrates with the current montage interface.\nIf you want playback time to be half, that means playing the montage with a play rate of 2.\nIf there is a TimeStretchCurve, it will be used.\nBut regardless or using a curve or not, play back time is guaranteed.\u003c/p\u003e\n\n\u003cp\u003e= Finding U and S = Ideally, we could figure out what U and S are given a T_Target play time.\nUnfortunately, the math for this is very complex.\u003c/p\u003e\n\n\u003cp\u003eWe update the montage position like this:\ndTO_i = dT_i * U * (1 + C_i)\u003c/p\u003e\n\n\u003cp\u003eWe sum this over the N time segments:\nSum(dTO_i) = Sum(dT_i * U * (1 + C_i))\nSum(dTO_i) = Sum(dT_i) * U + Sum(dT_i * U * S * C_i))\nT_Original = T_Target * U + U * S * Sum(dT_i * C_i)\u003c/p\u003e\n\n\u003cp\u003eWhere:\nS = (T_Original - T_Target * U) / (U * Sum(dT_i * C_i))\u003c/p\u003e\n\n\u003cp\u003eIf we were able to get dT_i constant, we could pull it out and get:\nS = (T_Original - T_Target * U) / (U * dT * Sum(C_i))\nWhere Sum(C_i) can be pre-computed.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately we don't have dT_i constant, and we can't,\nsince it is variable, and dependent on what S and U are.\u003c/p\u003e\n\n\u003cp\u003eSo our approach instead is to precompute lower and upper bounds for this curve.\nWe cache the results for dT_i for S = 100.f and S = -1.f + 0.01f\nThis gives us data for T_Target_Min and T_Target_Max.\nWithin these bounds, we can approximate dT_i, and also Sum(dT_i * C_i) by linear interpolation.\nOutside of these bounds, we rely on U to get us to our desired T_Target play back time.\u003c/p\u003e\n\n\u003cp\u003e'ConditionallyUpdateTimeStretchCurveCachedData' takes care of figuring out U and S\nbased on a given T_Target play back time.\u003c/p\u003e\n\n\u003cp\u003e= 'target' and 'original' space At run time, we generate a set of markers in what we call 'target' and 'original' space.\n'original' space means in the original play time the montage was authored in.\nSo that maps to actual frames of animation and actual position in the montage.\u003c/p\u003e\n\n\u003cp\u003e'target' space is the same set of markers, but mapped in play back time.\nThat is the actual time it takes to play back this montage.\u003c/p\u003e\n\n\u003cp\u003eTaking our play rate equation from above, it is:\ndT_Original = dT_Target * U * (1 + S * C_i)\u003c/p\u003e\n\n\u003cp\u003eWe see that montage position = playback time * play rate.\u003c/p\u003e\n\n\u003cp\u003eOnce we have mapped our markers in both 'target' and 'original' space,\nwe can easily go from one to the other, since time moves linearly between markers.\nSince between markers the play rate is defined as constant values:\nPR_i = U * (1.f + S * C_i).\nAnd we know that C_i is constant between two markers.\u003c/p\u003e\n\n\u003cp\u003eSo if we know between which markers we are in one space, we can switch to the other space instantly,\nas our relative position between these markers will be the same.\u003c/p\u003e\n\n\u003cp\u003eSo by jumping between these spaces, we can quickly go from a montage position to its playback time.\nWe can increase the playback time by the current's frame deltatime,\nand jump back to the corresponding frame of animation.\nThat's in a nutshell how this system works.\u003c/p\u003e\n\n\u003ch2\u003eConstructors\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/bd45d375-24cc-47ea-83a1-f889ed564065/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Animation/FTimeStretchCurve/__ctor\"\u003eFTimeStretchCurve\u003c/a\u003e ()\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eFunctions\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/ea3b9a59-2313-4f74-8373-35e9e0be6cba/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003evoid\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Animation/FTimeStretchCurve/BakeFromFloatCurve\"\u003eBakeFromFloatCurve\u003c/a\u003e\n (\nconst \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Animation/FFloatCurve\"\u003eFFloatCurve\u003c/a\u003e\u0026 TimeStretchCurve,\u003cbr\u003e\nfloat InSequenceLength\u003cbr\u003e\n )\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/7ab0a63a-10b6-4034-bc51-d96acaec099e/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e \u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/92043b57-c707-430f-b200-04652d8f3d60/api_function_const.png\" alt=\"Const\" loading=\"lazy\" title=\"Const\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003ebool\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Animation/FTimeStretchCurve/IsValid\"\u003eIsValid\u003c/a\u003e ()\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/c0f8d2ea-e5d9-4290-88fd-a7af65d46cf7/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003evoid\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Animation/FTimeStretchCurve/Reset\"\u003eReset\u003c/a\u003e ()\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "= Time Stretch Curve =",
  "document_type": null,
  "hash_id": "ndvbe5",
  "id": 3936379,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "kbwwJ0",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Runtime/Engine/Animation/FTimeStretchCurve",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "FTimeStretchCurve",
  "updated_at": "2024-11-13T18:56:25.695+00:00",
  "views_count": 1
}