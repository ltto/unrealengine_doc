{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime\"\u003eRuntime\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine\"\u003eEngine\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound\"\u003eSound\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eInheritance Hierarchy\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003eTVisitorPatternBase\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TQuartzCommandQueue\"\u003eTQuartzCommandQueue\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine\"\u003eEngine\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Source/Runtime/Engine/Classes/Sound/QuartzCompileTimeVisitor.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"Sound/QuartzCompileTimeVisitor.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eSyntax\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003etemplate\u0026lt;typename... Ts\u0026gt;  \nclass TVisitorPatternBase  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003eNotes on the Visitor Pattern (\u003ca href=\"https://en.wikipedia.org/wiki/Visitor_pattern\"\u003ehttps://en.wikipedia.org/wiki/Visitor_pattern\u003c/a\u003e) this is a pattern that helps solve two things:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eadds operations for a class without modifying the class itself (and more importantly for Quartz's use-case:)\u003c/li\u003e\n  \u003cli\u003eimplements Double-Dispatch (\u003ca href=\"https://en.wikipedia.org/wiki/Double_dispatch\"\u003ehttps://en.wikipedia.org/wiki/Double_dispatch\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eC++ supports single-dispatch through polymorphism, where a concrete function called depends on the dynamic type of a SINGLE object.\u003c/p\u003e\n\n\u003cp\u003ei.e.: MyBasePtr-\u003eDoThing(MyConcreteType);\u003c/p\u003e\n\n\u003cp\u003eDouble dispatch is being able resolve to a concrete function for how TWO dynamic types should interact\u003c/p\u003e\n\n\u003cp\u003ei.e.: MyBaseA_ptr-\u003eDoThing(MyBaseB_ptr)\u003c/p\u003e\n\n\u003cp\u003ewhere we could resolve to different concrete functions for each combination of the RUNTIME TYPES of objects derived from MyBaseA and MyBaseB.\u003c/p\u003e\n\n\u003cp\u003eConcretely, Quartz has metronome listeners, command listeners, etc and has things that can be both a metronome and a command listener.\u003c/p\u003e\n\n\u003cp\u003eThe DOWNSIDE to the visitor pattern is the element (or listener) types must be known at compile time. This makes it hard to write reusable objects like command queues.\u003c/p\u003e\n\n\u003cp\u003eThis implementation uses some template metaprogramming to abstract away the visitor pattern and let client code build reusable things like command queues and FSMs without needing to know the final concrete types.\u003c/p\u003e\n\n\u003cp\u003eIt also helps avoid some diamond inheritance problems that are easy to run into when attempting to have a \"consumer\" base type, and then types that can be multiple kinds of consumers. class \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase\"\u003eTVisitorPatternBase\u003c/a\u003e: Summary: Used as a base class to implement the visitor pattern for the provided Ts types.\u003c/p\u003e\n\n\u003cp\u003eExamples: For an example usage for client code derived from this see \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TQuartzCommandQueue\"\u003eTQuartzCommandQueue\u003c/a\u003e For an example of \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TQuartzCommandQueue\"\u003eTQuartzCommandQueue\u003c/a\u003e client code that accepts multiple visitors see \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/FQuartzTickableObject\"\u003eFQuartzTickableObject\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eClasses\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/0551385e-54fc-4851-9523-cb0f43120d13/api_class_protected.png\" alt=\"Protected class\" loading=\"lazy\" title=\"Protected class\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/IListenerBase\"\u003eIListenerBase\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/IListenerBase\"\u003eIListenerBase\u003c/a\u003e: this should not be inherited from directly, but is public for polymorphic access to client listeners via IListenerBase*\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/ead4761a-739b-4cfb-b83e-ac61f642ca6a/api_class_protected.png\" alt=\"Protected class\" loading=\"lazy\" title=\"Protected class\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/IVisitorBase\"\u003eIVisitorBase\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/78bfe1e0-be74-4617-82d5-9af92e82e36f/api_class_public.png\" alt=\"Public class\" loading=\"lazy\" title=\"Public class\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/TElementBase\"\u003eTElementBase\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/TElementBase\"\u003eTElementBase\u003c/a\u003e: Client code defines listener interfaces, and then the client's concrete types should inherit from those through this template base class.\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/797d78d3-d843-4053-a0b0-89496d25a4f3/api_class_protected.png\" alt=\"Protected class\" loading=\"lazy\" title=\"Protected class\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/TVisitWithLambda\"\u003eTVisitWithLambda\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Engine/Sound/TVisitorPatternBase/TVisitWithLambda\"\u003eTVisitWithLambda\u003c/a\u003e This templatized visitor is used in ::PushLambda() external code does not need to worry about the visitor pattern\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "Notes on the Visitor Pattern ([https://en.wikipedia.org/wiki/Visitor_pattern](https://en.wikipedia.org/wiki/Visitor_pattern)) this is a pattern that helps solve two things:",
  "document_type": null,
  "hash_id": "wYYpn5",
  "id": 3895458,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "QnnVvK",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Runtime/Engine/Sound/TVisitorPatternBase",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "TVisitorPatternBase",
  "updated_at": "2024-11-13T22:28:52.187+00:00",
  "views_count": 0
}