{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime\"\u003eRuntime\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore\"\u003eRenderCore\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore\"\u003eRenderCore\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Source/Runtime/RenderCore/Public/RenderGraphDefinitions.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"RenderGraphDefinitions.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eSyntax\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003estruct FRDGAsyncTask  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003eAn RDG pass execution lambda MAY be executed in a parallel task IF the lambda references a non-immediate command list AND the builder flags are set to execute in parallel. By default, if a pass executes in parallel, the task will be awaited at the end of \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/FRDGBuilder/Execute\"\u003eFRDGBuilder::Execute()\u003c/a\u003e. This behavior may be overridden by tagging the lambda with \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/FRDGAsyncTask\"\u003eFRDGAsyncTask\u003c/a\u003e as the first argument. A tagged lambda, when executed in parallel, is NOT awaited at the end of \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/FRDGBuilder/Execute\"\u003eFRDGBuilder::Execute()\u003c/a\u003e. Instead, the task is recorded as an outstanding RHI command list task (which share semantics with mesh passes or other parallel command list tasks) and can be manually awaited by calling FRDGBuilder::WaitForAsyncExecuteTasks() or formed into a task graph with \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/FRDGBuilder/GetAsyncExecuteTask\"\u003eFRDGBuilder::GetAsyncExecuteTask()\u003c/a\u003e (both static methods). The lifetime of RDG allocations is tied to these tasks and RDG will not release any memory or allocated objects until the last task completes, even though the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/FRDGBuilder\"\u003eFRDGBuilder\u003c/a\u003e instance itself may go out of scope and destruct.\u003c/p\u003e\n\n\u003cp\u003eConsider the following examples: // Builder is marked as supporting parallel execute.\nFRDGBuilder GraphBuilder(RDG_EVENT_NAME(\"MyBuilder\"), ERDGBuilderFlags::Parallel)\u003c/p\u003e\n\n\u003cp\u003eGraphBuilder.AddPass(RDG_EVENT_NAME(\"...\"), PassParameters, PassFlags, [...] (FRHICommandList\u0026 RHICmdList)\n{\n   // This will execute in parallel and is awaited by RDG on the render thread at the end of FRDGBuilder::Execute().\n});\u003c/p\u003e\n\n\u003cp\u003eGraphBuilder.AddPass(RDG_EVENT_NAME(\"...\"), PassParameters, PassFlags, [...] (FRHICommandListImmediate\u0026 RHICmdList)\n{\n   // This will execute inline on the render thread, because the immediate command list is referenced.\n});\u003c/p\u003e\n\n\u003cp\u003eFMyObject* Object = GraphBuilder.AllocObject\u003cFMyObject\u003e();\u003c/p\u003e\n\n\u003cp\u003eGraphBuilder.AddPass(RDG_EVENT_NAME(\"...\"), PassParameters, PassFlags, [Object] (FRDGAsyncTask, FRHICommandList\u0026 RHICmdList)\n{\n   // This will execute in parallel and is NOT awaited at the end of FRDGBuilder::Execute(). Accessing 'Object' is safe.\n});\u003c/p\u003e\n\n\u003cp\u003eGraphBuilder.Execute();\u003c/p\u003e\n\n\u003cp\u003eTasks can be synced in a few different ways. RDG async execute tasks are chained, so syncing the last batch will sync ALL prior batches. // This will sync all RDG async execute tasks.\nRHICmdList.ImmediateFlush(EImmediateFlushType::WaitForOutstandingTasksOnly);\u003c/p\u003e\n\n\u003cp\u003e// This will also sync all RDG async execute tasks.\nFRDGBuilder::WaitForAsyncExecuteTasks();\u003c/p\u003e\n\n\u003cp\u003e// Launch a task that will do something when RDG async execute tasks complete.\nUE::Tasks::Launch(UE_SOURCE_LOCATION, [...] { ... }, FRDGBuilder::GetAsyncExecuteTask());\u003c/p\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "An RDG pass execution lambda MAY be executed in a parallel task IF the lambda references a non-immediate command list AND the builder flags are set to execute in parallel.",
  "document_type": null,
  "hash_id": "zXXM0g",
  "id": 3907423,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "kbbV8w",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Runtime/RenderCore/FRDGAsyncTask",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "FRDGAsyncTask",
  "updated_at": "2024-11-14T01:44:18.203+00:00",
  "views_count": 0
}