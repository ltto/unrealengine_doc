{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime\"\u003eRuntime\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore\"\u003eRenderCore\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eInheritance Hierarchy\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/TStaticStateRHI\"\u003eTStaticStateRHI\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eTStaticBlendState\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/TStaticBlendStateWriteMask\"\u003eTStaticBlendStateWriteMask\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore\"\u003eRenderCore\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Source/Runtime/RenderCore/Public/RHIStaticStates.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"RHIStaticStates.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eSyntax\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003etemplate\u0026lt;EColorWriteMask RT0ColorWriteMask, EBlendOperation RT0ColorBlendOp, EBlendFactor RT0ColorSrcBlend, EBlendFactor RT0ColorDestBlend, EBlendOperation RT0AlphaBlendOp, EBlendFactor RT0AlphaSrcBlend, EBlendFactor RT0AlphaDestBlend, EColorWriteMask RT1ColorWriteMask, EBlendOperation RT1ColorBlendOp, EBlendFactor RT1ColorSrcBlend, EBlendFactor RT1ColorDestBlend, EBlendOperation RT1AlphaBlendOp, EBlendFactor RT1AlphaSrcBlend, EBlendFactor RT1AlphaDestBlend, EColorWriteMask RT2ColorWriteMask, EBlendOperation RT2ColorBlendOp, EBlendFactor RT2ColorSrcBlend, EBlendFactor RT2ColorDestBlend, EBlendOperation RT2AlphaBlendOp, EBlendFactor RT2AlphaSrcBlend, EBlendFactor RT2AlphaDestBlend, EColorWriteMask RT3ColorWriteMask, EBlendOperation RT3ColorBlendOp, EBlendFactor RT3ColorSrcBlend, EBlendFactor RT3ColorDestBlend, EBlendOperation RT3AlphaBlendOp, EBlendFactor RT3AlphaSrcBlend, EBlendFactor RT3AlphaDestBlend, EColorWriteMask RT4ColorWriteMask, EBlendOperation RT4ColorBlendOp, EBlendFactor RT4ColorSrcBlend, EBlendFactor RT4ColorDestBlend, EBlendOperation RT4AlphaBlendOp, EBlendFactor RT4AlphaSrcBlend, EBlendFactor RT4AlphaDestBlend, EColorWriteMask RT5ColorWriteMask, EBlendOperation RT5ColorBlendOp, EBlendFactor RT5ColorSrcBlend, EBlendFactor RT5ColorDestBlend, EBlendOperation RT5AlphaBlendOp, EBlendFactor RT5AlphaSrcBlend, EBlendFactor RT5AlphaDestBlend, EColorWriteMask RT6ColorWriteMask, EBlendOperation RT6ColorBlendOp, EBlendFactor RT6ColorSrcBlend, EBlendFactor RT6ColorDestBlend, EBlendOperation RT6AlphaBlendOp, EBlendFactor RT6AlphaSrcBlend, EBlendFactor RT6AlphaDestBlend, EColorWriteMask RT7ColorWriteMask, EBlendOperation RT7ColorBlendOp, EBlendFactor RT7ColorSrcBlend, EBlendFactor RT7ColorDestBlend, EBlendOperation RT7AlphaBlendOp, EBlendFactor RT7AlphaSrcBlend, EBlendFactor RT7AlphaDestBlend, bool bUseAlphaToCoverage\u0026gt;  \nclass TStaticBlendState : public TStaticStateRHI\u0026lt; TStaticBlendState\u0026lt; CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, CW_RGBA, BO_Add, BF_One, BF_Zero, BO_Add, BF_One, BF_Zero, false \u0026gt;, FBlendStateRHIRef, FRHIBlendState \u0026#42; \u0026gt;  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003eA static RHI blend state resource. TStaticBlendStateRHI\u003c...\u003e::GetStaticState() will return a FBlendStateRHIRef to a blend state with the desired settings. Should only be used from the rendering thread.\u003c/p\u003e\n\n\u003cp\u003eAlpha blending happens on GPU's as: FinalColor.rgb = SourceColor * ColorSrcBlend (ColorBlendOp) DestColor * ColorDestBlend; if (BlendState-\u003ebSeparateAlphaBlendEnable) FinalColor.a = SourceAlpha * AlphaSrcBlend (AlphaBlendOp) DestAlpha * AlphaDestBlend; else Alpha blended the same way as rgb\u003c/p\u003e\n\n\u003cp\u003eWhere source is the color coming from the pixel shader, and target is the color in the render target.\u003c/p\u003e\n\n\u003cp\u003eSo for example, TStaticBlendState\u003cBO_Add,BF_SourceAlpha,BF_InverseSourceAlpha,BO_Add,BF_Zero,BF_One\u003e produces: FinalColor.rgb = SourceColor * SourceAlpha + DestColor * (1 - SourceAlpha); FinalColor.a = SourceAlpha * 0 + DestAlpha * 1;\u003c/p\u003e\n\n\u003ch2\u003eFunctions\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/060314e3-e06c-4499-a67b-6e901caa4d08/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e \u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/a90f3273-cb99-4270-b403-f7deacca2f01/api_function_static.png\" alt=\"Static\" loading=\"lazy\" title=\"Static\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RHI/FBlendStateRHIRef\"\u003eFBlendStateRHIRef\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/RenderCore/TStaticBlendState/CreateRHI\"\u003eCreateRHI\u003c/a\u003e ()\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "A static RHI blend state resource.",
  "document_type": null,
  "hash_id": "1M3k1",
  "id": 3678901,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "WGNE6",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Runtime/RenderCore/TStaticBlendState",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "TStaticBlendState",
  "updated_at": "2024-11-14T01:56:39.966+00:00",
  "views_count": 5
}