{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime\"\u003eRuntime\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore\"\u003eNetCore\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net\"\u003eNet\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization\"\u003eSerialization\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore\"\u003eNetCore\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Source/Runtime/Net/Core/Classes/Net/Serialization/FastArraySerializer.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"Net/Serialization/FastArraySerializer.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eSyntax\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003etemplate\u0026lt;typename FastArrayType\u0026gt;  \nclass TFastArrayTypeHelper  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003e===================== Fast \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/TArray\"\u003eTArray\u003c/a\u003e Replication =====================\u003c/p\u003e\n\n\u003cp\u003eFast \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/TArray\"\u003eTArray\u003c/a\u003e Replication is a custom implementation of NetDeltaSerialize that is suitable for TArrays of UStructs. It offers performance improvements for large data sets, it serializes removals from anywhere in the array optimally, and allows events to be called on clients for adds and removals. The downside is that you will need to have game code mark items in the array as dirty, and well as the \u003cem\u003eorder\u003c/em\u003e of the list is not guaranteed to be identical between client and server in all cases.\u003c/p\u003e\n\n\u003cp\u003eUsing FTR is more complicated, but this is the code you need: Step 6 and beyond: -Declare a UPROPERTY of your FExampleArray (step 2) type. -You MUST call MarkItemDirty on the FExampleArray when you change an item in the array. You pass in a reference to the item you dirtied. See \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/FFastArraySerializer/MarkItemDirty\"\u003eFFastArraySerializer::MarkItemDirty\u003c/a\u003e. -You MUST call MarkArrayDirty on the FExampleArray if you remove something from the array. -In your classes GetLifetimeReplicatedProps, use DOREPLIFETIME(YourClass, YourArrayStructPropertyName);\u003c/p\u003e\n\n\u003cp\u003eYou can provide the following functions in your structure (step 1) to get notifies before add/deletes/removes: -void PreReplicatedRemove(const FFastArraySerializer\u0026 Serializer) -void PostReplicatedAdd(const FFastArraySerializer\u0026 Serializer) -void PostReplicatedChange(const FFastArraySerializer\u0026 Serializer) -void PostReplicatedReceive(const FFastArraySerializer::FPostReplicatedReceiveParameters\u0026 Parameters)\u003c/p\u003e\n\n\u003cp\u003eThats it! ===================== An Overview of Net Serialization and how this all works ===================== Everything originates in UNetDriver::ServerReplicateActors.\nActors are chosen to replicate, create actor channels, and UActorChannel::ReplicateActor is called.\nReplicateActor is ultimately responsible for deciding what properties have changed, and constructing an FOutBunch to send to clients.\u003c/p\u003e\n\n\u003cp\u003eThe UActorChannel has 2 ways to decide what properties need to be sent. The traditional way, which is a flat \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/TArray\"\u003eTArray\u003cuint8\u003e\u003c/a\u003e buffer: UActorChannel::Recent. This represents a flat block of the actor properties. This block literally can be cast to an AActor* and property values can be looked up if you know the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FProperty\"\u003eFProperty\u003c/a\u003e offset. The Recent buffer represents the values that the client using this actor channel has. We use recent to compare to current, and decide what to send.\u003c/p\u003e\n\n\u003cp\u003eThis works great for 'atomic' properties; ints, floats, object*, etc. It does not work for 'dynamic' properties such as TArrays, which store values Num/Max but also a pointer to their array data, The array data has no where to fit in the flat ::Recent buffer. (Dynamic is probably a bad name for these properties)\u003c/p\u003e\n\n\u003cp\u003eTo get around this, UActorChannel also has a \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Containers/TMap\"\u003eTMap\u003c/a\u003e for 'dynamic' state. UActorChannel::RecentDynamicState. This map allows us to look up a 'base state' for a property given a property's RepIndex.\u003c/p\u003e\n\n\u003cp\u003eNetSerialize \u0026 NetDeltaSerialize Properties that fit into the flat Recent buffer can be serialized entirely with NetSerialize. NetSerialize just reads or writes to an \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Serialization/FArchive\"\u003eFArchive\u003c/a\u003e. Since the replication can just look at the Recent[] buffer and do a direct comparison, it can tell what properties are dirty. NetSerialize just reads or writes.\u003c/p\u003e\n\n\u003cp\u003eDynamic properties can only be serialized with NetDeltaSerialize. NetDeltaSerialize is serialization from a given base state, and produces both a 'delta' state (which gets sent to the client) and a 'full' state (which is saved to be used as the base state in future delta serializes). NetDeltaSerialize essentially does the diffing as well as the serialization. It must do the diffing so it can know what parts of the property it must send.\u003c/p\u003e\n\n\u003cp\u003eBase States and dynamic properties replication. As far as the replication system / UActorChannel is concerned, a base state can be anything. The base state only deals with INetDeltaBaseState*.\u003c/p\u003e\n\n\u003cp\u003eUActorChannel::ReplicateActor will ultimately decide whether to call \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FProperty/NetSerializeItem\"\u003eFProperty::NetSerializeItem\u003c/a\u003e or FProperty::NetDeltaSerializeItem.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned above NetDeltaSerialize takes in an extra base state and produces a diff state and a full state. The full state produced is used as the base state for future delta serialization. NetDeltaSerialize uses the base state and the current values of the actor to determine what parts it needs to send.\u003c/p\u003e\n\n\u003cp\u003eThe INetDeltaBaseStates are created within the NetDeltaSerialize functions. The replication system / UActorChannel does not know about the details.\u003c/p\u003e\n\n\u003cp\u003eRight now, there are 2 forms of delta serialization: Generic Replication and Fast Array Replication.\u003c/p\u003e\n\n\u003cp\u003eGeneric Delta Replication Generic Delta Replication is implemented by FStructProperty::NetDeltaSerializeItem, FArrayProperty::NetDeltaSerializeItem, FProperty::NetDeltaSerializeItem. It works by first NetSerializing the current state of the object (the 'full' state) and using memcmp to compare it to previous base state. \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FProperty\"\u003eFProperty\u003c/a\u003e is what actually implements the comparison, writing the current state to the diff state if it has changed, and always writing to the full state otherwise. The \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FStructProperty\"\u003eFStructProperty\u003c/a\u003e and \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FArrayProperty\"\u003eFArrayProperty\u003c/a\u003e functions work by iterating their fields or array elements and calling the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FProperty\"\u003eFProperty\u003c/a\u003e function, while also embedding meta data.\u003c/p\u003e\n\n\u003cp\u003eFor example \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FArrayProperty\"\u003eFArrayProperty\u003c/a\u003e basically writes: \"Array has X elements now\" -\u003e \"Here is element Y\" -\u003e Output from FProperty::NetDeltaSerialize -\u003e \"Here is element Z\" -\u003e etc\u003c/p\u003e\n\n\u003cp\u003eGeneric Data Replication is the 'default' way of handling \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FArrayProperty\"\u003eFArrayProperty\u003c/a\u003e and \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/CoreUObject/UObject/FStructProperty\"\u003eFStructProperty\u003c/a\u003e serialization. This will work for any array or struct with any sub properties as long as those properties can NetSerialize.\u003c/p\u003e\n\n\u003cp\u003eCustom Net Delta Serialiation Custom Net Delta Serialiation works by using the struct trait system. If a struct has the WithNetDeltaSerializer trait, then its native NetDeltaSerialize function will be called instead of going through the Generic Delta Replication code path in FStructProperty::NetDeltaSerializeItem.\u003c/p\u003e\n\n\u003cp\u003eFast \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/TArray\"\u003eTArray\u003c/a\u003e Replication Fast \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/TArray\"\u003eTArray\u003c/a\u003e Replication is implemented through custom net delta serialization. Instead of a flat \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/TraceLog/TArray\"\u003eTArray\u003c/a\u003e buffer to represent states, it only is concerned with a \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/Core/Containers/TMap\"\u003eTMap\u003c/a\u003e of IDs and ReplicationKeys. The IDs map to items in the array, which all have a ReplicationID field defined in \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/FFastArraySerializerItem\"\u003eFFastArraySerializerItem\u003c/a\u003e. \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/FFastArraySerializerItem\"\u003eFFastArraySerializerItem\u003c/a\u003e also has a ReplicationKey field. When items are marked dirty with MarkItemDirty, they are given a new ReplicationKey, and assigned a new ReplicationID if they don't have one.\u003c/p\u003e\n\n\u003cp\u003eFastArrayDeltaSerialize (defined below) During server serialization (writing), we compare the old base state (e.g, the old ID\u003c-\u003eKey map) with the current state of the array. If items are missing we write them out as deletes in the bunch. If they are new or changed, they are written out as changed along with their state, serialized via a NetSerialize call.\u003c/p\u003e\n\n\u003cp\u003eFor example, what actually is written may look like: \"Array has X changed elements, Y deleted elements\" -\u003e \"element A changed\" -\u003e Output from NetSerialize on rest of the struct item -\u003e \"Element B was deleted\" -\u003e etc\u003c/p\u003e\n\n\u003cp\u003eNote that the ReplicationID is replicated and in sync between client and server. The indices are not.\u003c/p\u003e\n\n\u003cp\u003eDuring client serialization (reading), the client reads in the number of changed and number of deleted elements. It also builds a mapping of ReplicationID -\u003e local index of the current array. As it deserializes IDs, it looks up the element and then does what it needs to (create if necessary, serialize in the current state, or delete).\u003c/p\u003e\n\n\u003cp\u003eDelta Serialization for inner structs is now enabled by default. That means that when a ReplicationKey changes, we will compare the current state of the struct to the last sent state, tracking changelists and only sending properties that changed exactly like the standard replication path. If this causes issues with a specific FastArray type, it can be disabled by calling FFastArraySerializer::SetDeltaSerializationEnabled(false) in the constructor. The feature can be completely disabled by setting the \"net.SupportFastArrayDelta\" CVar to 0.\u003c/p\u003e\n\n\u003cp\u003eReplicationID and ReplicationKeys are set by the MarkItemDirty function on \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/FFastArraySerializer\"\u003eFFastArraySerializer\u003c/a\u003e. These are just int32s that are assigned in order as things change. There is nothing special about them other than being unique. Helper to get auto-deduced FastArrayItemType from FastArraySerializer\u003c/p\u003e\n\n\u003ch2\u003eFunctions\u003c/h2\u003e\n\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003eType\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/4d5b1af9-8bfd-4dbb-a6c5-6134fcd0cf9b/api_function_public.png\" alt=\"Public function\" loading=\"lazy\" title=\"Public function\" convert=\"false\" width=\"18\" /\u003e \u003cimg src=\"https://d1iv7db44yhgxn.cloudfront.net/documentation/images/ba2c95db-aded-49f8-ac94-cb5faa09ea00/api_function_static.png\" alt=\"Static\" loading=\"lazy\" title=\"Static\" convert=\"false\" width=\"18\" /\u003e\u003c/td\u003e\n      \u003ctd\u003ebool\u003c/td\u003e\n      \u003ctd\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/TFastArrayTypeHelper/HasValidFastArra-\"\u003eHasValidFastArrayItemType\u003c/a\u003e ()\u003c/p\u003e\n\u003c/div\u003e\u003c/td\u003e\n      \u003ctd\u003eReturns true if auto detected FastArrayItemType is a valid FastArrayItemType\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eTypedefs\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/TFastArrayTypeHelper/FastArrayItemType\"\u003eFastArrayItemType\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003e \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eConstants\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Runtime/NetCore/Net/Serialization/TFastArrayTypeHelper/FastArrayTypePtr\"\u003eFastArrayTypePtr\u003c/a\u003e\u003c/td\u003e\n      \u003ctd\u003eHelper to always return a Type even if GetFastArrayItemTypePtr is not defined.\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "===================== Fast [TArray](API\\Runtime\\TraceLog\\TArray) Replication =====================",
  "document_type": null,
  "hash_id": "q4qqm",
  "id": 3668887,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "3J5rx",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Runtime/NetCore/Net/Serialization/TFastArrayTypeHelper",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "TFastArrayTypeHelper",
  "updated_at": "2024-11-14T01:28:17.767+00:00",
  "views_count": 3
}