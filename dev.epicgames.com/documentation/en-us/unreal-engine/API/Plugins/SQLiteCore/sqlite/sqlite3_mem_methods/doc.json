{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins\"\u003ePlugins\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore\"\u003eSQLiteCore\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite\"\u003esqlite\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eType\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003etypedef struct sqlite3_mem_methods sqlite3_mem_methods  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore\"\u003eSQLiteCore\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Plugins/Runtime/Database/SQLiteCore/Source/SQLiteCore/Public/sqlite/sqlite3.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"sqlite/sqlite3.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003eCAPI3REF: Memory Allocation Routines\u003c/p\u003e\n\n\u003cp\u003eAn instance of this object defines the interface between SQLite and low-level memory allocation routines.\u003c/p\u003e\n\n\u003cp\u003eThis object is used in only one place in the SQLite interface. A pointer to an instance of this object is the argument to [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_config\"\u003esqlite3_config()\u003c/a\u003e] when the configuration option is [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].\n By creating an instance of this object and passing it to \u003ca href=\"https://dev.epicgames.com/documentation/404\"\u003esqlite3_config\u003c/a\u003e during configuration, an application can specify an alternative memory allocation subsystem for SQLite to use for all of its dynamic memory needs.\u003c/p\u003e\n\n\u003cp\u003eNote that SQLite comes with several [built-in memory allocators] that are perfectly adequate for the overwhelming majority of applications and that this object is only useful to a tiny minority of applications with specialized memory allocation requirements. This object is also used during testing of SQLite in order to specify an alternative memory allocator that simulates memory out-of-memory conditions in order to verify that SQLite recovers gracefully from such conditions.\u003c/p\u003e\n\n\u003cp\u003eThe xMalloc, xRealloc, and xFree methods must work like the malloc(), realloc() and free() functions from the standard C library. ^SQLite guarantees that the second argument to xRealloc is always a value returned by a prior call to xRoundup.\u003c/p\u003e\n\n\u003cp\u003exSize should return the allocated size of a memory allocation previously obtained from xMalloc or xRealloc. The allocated size is always at least as big as the requested size but may be larger.\u003c/p\u003e\n\n\u003cp\u003eThe xRoundup method returns what would be the allocated size of a memory allocation given a particular requested size. Most memory allocators round up memory allocations at least to the next multiple of 8. Some allocators round up to a larger multiple or to a power of 2. Every memory allocation request coming in through [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_malloc\"\u003esqlite3_malloc()\u003c/a\u003e] or [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_realloc\"\u003esqlite3_realloc()\u003c/a\u003e] first calls xRoundup. If xRoundup returns 0, that causes the corresponding memory allocation to fail.\u003c/p\u003e\n\n\u003cp\u003eThe xInit method initializes the memory allocator. For example, it might allocate any required mutexes or initialize internal data structures. The xShutdown method is invoked (indirectly) by [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_shutdown\"\u003esqlite3_shutdown()\u003c/a\u003e] and should deallocate any resources acquired by xInit. The pAppData pointer is used as the only parameter to xInit and xShutdown.\u003c/p\u003e\n\n\u003cp\u003eSQLite holds the [SQLITE_MUTEX_STATIC_MASTER] mutex when it invokes the xInit method, so the xInit method need not be threadsafe. The xShutdown method is only called from [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_shutdown\"\u003esqlite3_shutdown()\u003c/a\u003e] so it does not need to be threadsafe either. For all other methods, SQLite holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which it is by default) and so the methods are automatically serialized. However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other methods must be threadsafe or else make their own arrangements for serialization.\u003c/p\u003e\n\n\u003cp\u003eSQLite will never invoke xInit() more than once without an intervening call to xShutdown().\u003c/p\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "CAPI3REF: Memory Allocation Routines",
  "document_type": null,
  "hash_id": "3eedp4",
  "id": 3856609,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "EEEkOQ",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Plugins/SQLiteCore/sqlite/sqlite3_mem_methods",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "sqlite3_mem_methods",
  "updated_at": "2024-11-13T12:59:59.054+00:00",
  "views_count": 0
}