{
  "application_families": [
    "unreal_engine"
  ],
  "applications": [
    {
      "id": 3581142,
      "major_version": "5",
      "type": "unreal_engine",
      "version": "5.5"
    }
  ],
  "blocks": [
    {
      "content_html": "\u003ch2\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API\"\u003eUnreal Engine C++ API Reference\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins\"\u003ePlugins\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore\"\u003eSQLiteCore\u003c/a\u003e \u003e \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite\"\u003esqlite\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eType\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003etypedef struct sqlite3_vfs sqlite3_vfs  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e \u003c/th\u003e\n      \u003cth\u003e \u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eModule\u003c/td\u003e\n      \u003ctd\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore\"\u003eSQLiteCore\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eHeader\u003c/td\u003e\n      \u003ctd\u003e/Engine/Plugins/Runtime/Database/SQLiteCore/Source/SQLiteCore/Public/sqlite/sqlite3.h\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eInclude\u003c/td\u003e\n      \u003ctd\u003e#include \"sqlite/sqlite3.h\"\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eRemarks\u003c/h2\u003e\n\n\u003cp\u003eCAPI3REF: OS Interface Object\u003c/p\u003e\n\n\u003cp\u003eAn instance of the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1\"\u003esqlite3_vfs\u003c/a\u003e object defines the interface between the SQLite core and the underlying operating system. The \"vfs\" in the name of the object stands for \"virtual file system\". See the [VFS | VFS documentation] for further information.\u003c/p\u003e\n\n\u003cp\u003eThe VFS interface is sometimes extended by adding new methods onto the end. Each time such an extension occurs, the iVersion field is incremented. The iVersion value started out as 1 in SQLite [version 3.5.0] on [dateof:3.5.0], then increased to 2 with SQLite [version 3.7.0] on [dateof:3.7.0], and then increased to 3 with SQLite [version 3.7.6] on [dateof:3.7.6]. Additional fields may be appended to the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1\"\u003esqlite3_vfs\u003c/a\u003e object and the iVersion value may increase again in future versions of SQLite. Note that due to an oversight, the structure of the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1\"\u003esqlite3_vfs\u003c/a\u003e object changed in the transition from SQLite [version 3.5.9] to [version 3.6.0] on [dateof:3.6.0] and yet the iVersion field was not increased.\u003c/p\u003e\n\n\u003cp\u003eThe szOsFile field is the size of the subclassed [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_file_1\"\u003esqlite3_file\u003c/a\u003e] structure used by this VFS. mxPathname is the maximum length of a pathname in this VFS.\u003c/p\u003e\n\n\u003cp\u003eRegistered \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1\"\u003esqlite3_vfs\u003c/a\u003e objects are kept on a linked list formed by the pNext pointer. The [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_register\"\u003esqlite3_vfs_register()\u003c/a\u003e] and [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_unregister\"\u003esqlite3_vfs_unregister()\u003c/a\u003e] interfaces manage this list in a thread-safe way. The [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_find\"\u003esqlite3_vfs_find()\u003c/a\u003e] interface searches the list. Neither the application code nor the VFS implementation should use the pNext pointer.\u003c/p\u003e\n\n\u003cp\u003eThe pNext field is the only field in the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1\"\u003esqlite3_vfs\u003c/a\u003e structure that SQLite will ever modify. SQLite will only access or modify this field while holding a particular static mutex. The application should never modify anything within the \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1\"\u003esqlite3_vfs\u003c/a\u003e object once the object has been registered.\u003c/p\u003e\n\n\u003cp\u003eThe zName field holds the name of the VFS module. The name must be unique across all VFS modules.\u003c/p\u003e\n\n\u003cp\u003e[[\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_vfs_1/xOpen\"\u003esqlite3_vfs.xOpen\u003c/a\u003e]] ^SQLite guarantees that the zFilename parameter to xOpen is either a NULL pointer or string obtained from xFullPathname() with an optional suffix added. ^If a suffix is added to the zFilename parameter, it will consist of a single \"-\" character followed by no more than 11 alphanumeric and/or \"-\" characters. ^SQLite further guarantees that the string will be valid and unchanged until xClose() is called. Because of the previous sentence, the [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_file_1\"\u003esqlite3_file\u003c/a\u003e] can safely store a pointer to the filename if it needs to remember the filename for some reason. If the zFilename parameter to xOpen is a NULL pointer then xOpen must invent its own temporary name for the file. ^Whenever the xFilename parameter is NULL it will also be the case that the flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].\u003c/p\u003e\n\n\u003cp\u003eThe flags argument to xOpen() includes all bits set in the flags argument to [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_open_v2\"\u003esqlite3_open_v2()\u003c/a\u003e]. Or if [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_open\"\u003esqlite3_open()\u003c/a\u003e] or [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_open16\"\u003esqlite3_open16()\u003c/a\u003e] is used, then flags includes at least [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]. If xOpen() opens a file read-only then it sets *pOutFlags to include [SQLITE_OPEN_READONLY]. Other bits in *pOutFlags may be set.\u003c/p\u003e\n\n\u003cp\u003e^(SQLite will also add one of the following flags to the xOpen() call, depending on the object being opened:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e[SQLITE_OPEN_MAIN_DB]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_MAIN_JOURNAL]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_TEMP_DB]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_TEMP_JOURNAL]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_TRANSIENT_DB]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_SUBJOURNAL]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_MASTER_JOURNAL]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_WAL]\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e)^\u003c/p\u003e\n\n\u003cp\u003eThe file I/O implementation can use the object type flags to change the way it deals with files. For example, an application that does not care about crash recovery or rollback might make the open of a journal file a no-op. Writes to this journal would also be no-ops, and any attempt to read the journal would return SQLITE_IOERR. Or the implementation might recognize that a database file will be doing page-aligned sector reads and writes in a random order and set up its I/O subsystem accordingly.\u003c/p\u003e\n\n\u003cp\u003eSQLite might also add one of the following flags to the xOpen method:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e[SQLITE_OPEN_DELETEONCLOSE]\u003c/li\u003e\n  \u003cli\u003e[SQLITE_OPEN_EXCLUSIVE]\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be deleted when it is closed. ^The [SQLITE_OPEN_DELETEONCLOSE] will be set for TEMP databases and their journals, transient databases, and subjournals.\u003c/p\u003e\n\n\u003cp\u003e^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction with the [SQLITE_OPEN_CREATE] flag, which are both directly analogous to the O_EXCL and O_CREAT flags of the POSIX open() API. The SQLITE_OPEN_EXCLUSIVE flag, when paired with the SQLITE_OPEN_CREATE, is used to indicate that file should always be created, and that it is an error if it already exists. It is \u003cem\u003enot\u003c/em\u003e used to indicate the file should be opened for exclusive access.\u003c/p\u003e\n\n\u003cp\u003e^At least szOsFile bytes of memory are allocated by SQLite to hold the [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_file_1\"\u003esqlite3_file\u003c/a\u003e] structure passed as the third argument to xOpen. The xOpen method does not have to allocate the structure; it should just fill it in. Note that the xOpen method must set the \u003ca href=\"https://dev.epicgames.com/documentation/404\"\u003esqlite3_file.pMethods\u003c/a\u003e to either a valid [\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/SQLiteCore/sqlite/sqlite3_io_methods_1\"\u003esqlite3_io_methods\u003c/a\u003e] object or to NULL. xOpen must do this even if the open fails. SQLite expects that the \u003ca href=\"https://dev.epicgames.com/documentation/404\"\u003esqlite3_file.pMethods\u003c/a\u003e element will be valid after xOpen returns regardless of the success or failure of the xOpen call.\u003c/p\u003e\n\n\u003cp\u003e[[\u003ca href=\"https://dev.epicgames.com/documentation/404\"\u003esqlite3_vfs.xAccess\u003c/a\u003e]] ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS] to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to test whether a file is readable and writable, or [SQLITE_ACCESS_READ] to test whether a file is at least readable. The SQLITE_ACCESS_READ flag is never actually used and is not implemented in the built-in VFSes of SQLite. The file is named by the second argument and can be a directory. The xAccess method returns [SQLITE_OK] on success or some non-zero error code if there is an I/O error or if the name of the file given in the second argument is illegal. If SQLITE_OK is returned, then non-zero or zero is written into *pResOut to indicate whether or not the file is accessible.\u003c/p\u003e\n\n\u003cp\u003e^SQLite will always allocate at least mxPathname+1 bytes for the output buffer xFullPathname. The exact size of the output buffer is also passed as a parameter to both methods. If the output buffer is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is handled as a fatal error by SQLite, vfs implementations should endeavor to prevent this by setting mxPathname to a sufficiently large value.\u003c/p\u003e\n\n\u003cp\u003eThe xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64() interfaces are not strictly a part of the filesystem, but they are included in the VFS structure for completeness. The xRandomness() function attempts to return nBytes bytes of good-quality randomness into zOut. The return value is the actual number of bytes of randomness obtained. The xSleep() method causes the calling thread to sleep for at least the number of microseconds given. ^The xCurrentTime() method returns a Julian Day Number for the current date and time as a floating point value. ^The xCurrentTimeInt64() method returns, as an integer, the Julian Day Number multiplied by 86400000 (the number of milliseconds in a 24-hour day).\n ^SQLite will use the xCurrentTimeInt64() method to get the current date and time if that method is available (if iVersion is 2 or greater and the function pointer is not NULL) and will fall back to xCurrentTime() if xCurrentTimeInt64() is unavailable.\u003c/p\u003e\n\n\u003cp\u003e^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces are not used by the SQLite core. These optional interfaces are provided by some VFSes to facilitate testing of the VFS code. By overriding system calls with functions under its control, a test program can simulate faults and error conditions that would otherwise be difficult or impossible to induce. The set of system calls that can be overridden varies from one VFS to another, and from one version of the same VFS to the next. Applications that use these interfaces must be prepared for any or all of these interfaces to be NULL or for their behavior to change from one release to the next. Applications must not attempt to access any of these methods if the iVersion of the VFS is less than 3.\u003c/p\u003e\n",
      "settings": {
        "is_hidden": false
      },
      "type": "markdown"
    }
  ],
  "description": "CAPI3REF: OS Interface Object",
  "document_type": null,
  "hash_id": "PwwLpb",
  "id": 3856807,
  "locale": "en-us",
  "prereq_documents": [],
  "readiness": "production",
  "related_documents": [],
  "revision_hash_id": "7AAv2P",
  "seo_description": null,
  "seo_slug": null,
  "seo_title": null,
  "slug": "API/Plugins/SQLiteCore/sqlite/sqlite3_vfs",
  "source": "ue_cpp_api_external",
  "tags": [],
  "title": "sqlite3_vfs",
  "updated_at": "2024-11-13T13:00:09.921+00:00",
  "views_count": 0
}